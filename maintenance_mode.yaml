blueprint:
  name: "Maintenance Mode (forced light state)"
  description: >
    This blueprint captures the current state of selected lights before cleaning begins,
    continuously forces them on during cleaning (if an optional additional condition is met),
    and then restores the previous state when cleaning stops.
    Instead of computing a unique scene id automatically, you provide a scene slug (without the "scene." prefix)
    to be used for the snapshot. Ensure this scene id is unique per automation instance.
  domain: automation
  input:
    cleaning_sensor:
      name: Vacuum Cleaning Sensor
      description: "Select the binary sensor that indicates your vacuum is cleaning."
      selector:
        entity:
          domain: binary_sensor
    lights:
      name: Lights to Manage
      description: "Select one or more lights to manage during cleaning."
      selector:
        target:
          entity:
            domain: light
    check_interval:
      name: Check Interval
      description: "Interval in seconds between checks to reassert that the lights are on."
      default: 5
      selector:
        number:
          min: 1
          max: 60
          unit_of_measurement: seconds
    additional_condition:
      name: Additional Condition
      description: >
        Optional template condition that must evaluate to true for the lights to be kept on.
        For example:
        ```
        is_state('binary_sensor.door', 'off') and is_state('sun.sun', 'below_horizon')
        ```
        Defaults to `true` if not specified.
      default: "true"
      selector:
        text:
          multiline: true
    snapshot_scene:
      name: Snapshot Scene (slug)
      description: >
        Provide a unique scene slug (without the "scene." prefix) that will be used to capture the
        current state of the lights before cleaning begins. This scene is later activated to restore the state.
      default: "robot_cleaning_restore"
      selector:
        text:

trigger:
  - platform: state
    entity_id: !input cleaning_sensor
    to: "on"

action:
  # Create a snapshot scene of the selected lights.
  - service: scene.create
    data:
      scene_id: !input snapshot_scene
      snapshot_entities: "{{ lights.entity_id }}"
  # While cleaning is active, reassert that the lights remain on if the additional condition is met.
  - repeat:
      while:
        - condition: state
          entity_id: !input cleaning_sensor
          state: "on"
      sequence:
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ additional_condition }}"
              sequence:
                - service: light.turn_on
                  target: !input lights
          default: []
        - delay:
            seconds: !input check_interval
  # When cleaning stops, restore the lights' previous state.
  - service: scene.turn_on
    data:
      scene: "scene.{{ snapshot_scene }}"

mode: single
